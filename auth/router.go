package auth

import (
	"time"

	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v5"
	"golang.org/x/crypto/bcrypt"
	"net/http"
)

var jwtSecret = []byte("super_secret_key") // ‚ùó –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ .env

func RegisterRoutes(r *gin.Engine) {
	r.POST("/login", loginHandler)
	r.POST("/register", registerHandler)
	r.POST("/refresh", refreshHandler)

	// ‚úÖ –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É
	authGroup := r.Group("/")
	authGroup.Use(AuthMiddleware())
	authGroup.GET("/me", MeHandler)
	authGroup.GET("/auth/check", checkAuthHandler)

}

// ----------------- LOGIN -----------------

type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func loginHandler(c *gin.Context) {
	var req LoginRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	user, err := getUserByEmail(req.Email)
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	if err := bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(req.Password)); err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"})
		return
	}

	// üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º access –∏ refresh —Ç–æ–∫–µ–Ω—ã
	accessToken, refreshToken, err := generateTokens(user.ID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"})
		return
	}

	// üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º access-—Ç–æ–∫–µ–Ω –≤ —Å–µ—Å—Å–∏–∏
	err = createSession(user.ID, accessToken, time.Now().Add(15*time.Minute))
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏"})
		return
	}

	// üç™ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refresh-—Ç–æ–∫–µ–Ω –≤ HttpOnly cookie
	c.SetCookie("refresh_token", refreshToken, 7*24*60*60, "/", "localhost", false, true)
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
	// 7 –¥–Ω–µ–π, path "/", –¥–æ–º–µ–Ω "localhost", secure=false (true –Ω–∞ HTTPS), httpOnly=true

	// üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º access-—Ç–æ–∫–µ–Ω –∏ user_id –∫–ª–∏–µ–Ω—Ç—É
	c.JSON(http.StatusOK, gin.H{
		"token":   accessToken,
		"user_id": user.ID,
	})
}

// ----------------- REGISTER -----------------

type RegisterRequest struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	Password  string `json:"password"`
}

func registerHandler(c *gin.Context) {
	var req RegisterRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	if existingUser, _ := getUserByEmail(req.Email); existingUser != nil {
		c.JSON(http.StatusConflict, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
		return
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è"})
		return
	}

	err = createUser(req.FirstName, req.LastName, req.Email, string(hashedPassword))
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"})
}

func AuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		authHeader := c.GetHeader("Authorization")
		if authHeader == "" || len(authHeader) <= len("Bearer ") {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
			return
		}

		tokenStr := authHeader[len("Bearer "):]
		token, err := jwt.Parse(tokenStr, func(token *jwt.Token) (interface{}, error) {
			return jwtSecret, nil
		})
		if err != nil || !token.Valid {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"})
			return
		}

		claims, ok := token.Claims.(jwt.MapClaims)
		if !ok {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞"})
			return
		}

		userIDFloat, ok := claims["user_id"].(float64)
		if !ok {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id"})
			return
		}

		// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
		session, err := getSessionByToken(tokenStr)
		if err != nil || session.Revoked || session.ExpiresAt.Before(time.Now()) {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"})
			return
		}

		c.Set("user_id", int(userIDFloat))
		c.Next()
	}
}

func MeHandler(c *gin.Context) {
	userID := c.GetInt("user_id")

	user, err := getUserByID(userID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"id":         user.ID,
		"first_name": user.FirstName,
		"last_name":  user.LastName,
		"email":      user.Email,
	})
}

type Session struct {
	ID        int
	UserID    int
	CreatedAt time.Time
	ExpiresAt time.Time
	Revoked   bool
	JWTToken  string
}

func getSessionByToken(token string) (*Session, error) {
	var session Session
	err := db.QueryRow(`
		SELECT id, user_id, created_at, expires_at, revoked, jwt_token
		FROM sessions
		WHERE jwt_token = $1
	`, token).Scan(&session.ID, &session.UserID, &session.CreatedAt, &session.ExpiresAt, &session.Revoked, &session.JWTToken)

	if err != nil {
		return nil, err
	}

	return &session, nil
}

func logoutHandler(c *gin.Context) {
	authHeader := c.GetHeader("Authorization")
	tokenStr := authHeader[len("Bearer "):]

	_, err := db.Exec(`UPDATE sessions SET revoked = true WHERE jwt_token = $1`, tokenStr)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"})
}

func checkAuthHandler(c *gin.Context) {
	userID := c.GetInt("user_id")
	user, err := getUserByID(userID)
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"status": "authorized",
		"user": gin.H{
			"id":       user.ID,
			"username": user.FirstName + " " + user.LastName,
			"email":    user.Email,
		},
	})
}

func generateTokens(userID int) (string, string, error) {
	accessToken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"user_id": userID,
		"exp":     time.Now().Add(15 * time.Minute).Unix(), // –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–π
	})
	accessTokenStr, err := accessToken.SignedString(jwtSecret)
	if err != nil {
		return "", "", err
	}

	refreshToken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"user_id": userID,
		"exp":     time.Now().Add(7 * 24 * time.Hour).Unix(), // –∂–∏–≤—ë—Ç –¥–æ–ª—å—à–µ
	})
	refreshTokenStr, err := refreshToken.SignedString(jwtSecret)
	if err != nil {
		return "", "", err
	}

	return accessTokenStr, refreshTokenStr, nil
}
func refreshHandler(c *gin.Context) {
	refreshTokenStr, err := c.Cookie("refresh_token")
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Refresh —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	token, err := jwt.Parse(refreshTokenStr, func(token *jwt.Token) (interface{}, error) {
		return jwtSecret, nil
	})
	if err != nil || !token.Valid {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π refresh —Ç–æ–∫–µ–Ω"})
		return
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞"})
		return
	}

	userIDFloat, ok := claims["user_id"].(float64)
	if !ok {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π user_id"})
		return
	}

	userID := int(userIDFloat)
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π access_token
	newAccess, _, err := generateTokens(userID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ access —Ç–æ–∫–µ–Ω–∞"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"access_token": newAccess,
	})
}
