package auth

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v5"
	"golang.org/x/crypto/bcrypt"
	"net/http"

	"crypto/rand"
	"encoding/hex"

	"net/smtp"
	"os"
)

var jwtSecret = []byte("super_secret_key") // ‚ùó –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ .env

func RegisterRoutes(r *gin.Engine) {
	r.POST("/login", loginHandler)
	r.POST("/register", registerHandler)
	r.POST("/refresh", refreshHandler)
	r.POST("/verify", verifyHandler)
	r.GET("/verify", verifyEmailHandler)
	r.POST("/invite", AuthMiddleware(), inviteHandler)
	r.POST("/set-password", setPasswordHandler)
	r.GET("/api/users", AuthMiddleware(), getAllUsersHandler)
	r.POST("/roles/rename", renameRoleHandler)
	r.POST("/roles/delete", deleteRoleHandler)

	// ‚úÖ –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É
	authGroup := r.Group("/")
	authGroup.Use(AuthMiddleware())
	authGroup.GET("/me", MeHandler)
	authGroup.GET("/auth/check", checkAuthHandler)
	authGroup.GET("/users/invited", getInvitedUsersHandler)
	authGroup.POST("/users/assign-role", assignRoleHandler)
	r.GET("/api/roles", AuthMiddleware(), getAllRolesHandler)
	authGroup.POST("/users/:id/block", blockUserHandler)
	authGroup.DELETE("/users/:id", deleteUserHandler)
	authGroup.POST("/users/:id/unblock", unblockUserHandler)

}

// ----------------- LOGIN -----------------

type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func loginHandler(c *gin.Context) {
	var req LoginRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø—Ä–∏ –≤—Ö–æ–¥–µ:", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	log.Printf("‚û°Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: email=%s", req.Email)

	user, err := getUserByEmail(req.Email)
	if err != nil || user == nil {
		log.Printf("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", req.Email)
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	if !user.EmailVerified {
		log.Printf("‚ö†Ô∏è Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: %s", req.Email)
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É."})
		return
	}

	if user.PasswordHash == "" {
		log.Printf("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–≥–ª–∞—à—ë–Ω –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é)", req.Email)
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ü–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø–∏—Å—å–º–æ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ."})
		return
	}

	if err := bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(req.Password)); err != nil {
		log.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", req.Email)
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"})
		return
	}

	log.Printf("üîê –ü–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d", user.ID)

	accessToken, refreshToken, err := generateTokens(user.ID)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"})
		return
	}

	log.Println("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º access —Ç–æ–∫–µ–Ω –≤ —Å–µ—Å—Å–∏–∏...")

	if err := createSession(user.ID, accessToken, time.Now().Add(15*time.Minute)); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏"})
		return
	}

	log.Println("üç™ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refresh_token –≤ HttpOnly cookie...")

	c.SetCookie("refresh_token", refreshToken, 7*24*60*60, "/", "localhost", false, true)

	log.Printf("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: user_id=%d", user.ID)

	c.JSON(http.StatusOK, gin.H{
		"token":   accessToken,
		"user_id": user.ID,
	})
}

// ----------------- REGISTER -----------------

type RegisterRequest struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	Password  string `json:"password"`
	Role      string `json:"role"`
}

func getOrCreateRoleID(roleName string) (int, error) {
	var id int
	err := db.QueryRow(`SELECT id FROM roles WHERE name = $1`, roleName).Scan(&id)
	if err == sql.ErrNoRows {
		err = db.QueryRow(`INSERT INTO roles (name) VALUES ($1) RETURNING id`, roleName).Scan(&id)
	}
	return id, err
}

func registerHandler(c *gin.Context) {
	var req RegisterRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		log.Printf("%s ‚û°Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	log.Printf("%s ‚û°Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: email=%s\n", time.Now().Format("2006/01/02 15:04:05"), req.Email)

	if existingUser, _ := getUserByEmail(req.Email); existingUser != nil {
		log.Printf("%s ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email %s —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n", time.Now().Format("2006/01/02 15:04:05"), req.Email)
		c.JSON(http.StatusConflict, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
		return
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	if err != nil {
		log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è"})
		return
	}

	verificationToken := generateToken()
	verificationExpires := time.Now().Add(24 * time.Hour)

	orgName := fmt.Sprintf("–ö–æ–º–ø–∞–Ω–∏—è %s %s", req.FirstName, req.LastName)
	orgID, err := createOrganization(orgName)
	if err != nil {
		log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"})
		return
	}

	var userCount int
	err = db.QueryRow(`SELECT COUNT(*) FROM users WHERE organization_id = $1`, orgID).Scan(&userCount)
	if err != nil {
		log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞"})
		return
	}
	isOwner := userCount == 0

	// üß† –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if req.Role == "" {
		if isOwner {
			req.Role = "–í–ª–∞–¥–µ–ª–µ—Ü"
		} else {
			req.Role = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
		}
	}

	// üëâ –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º ID —Ä–æ–ª–∏
	roleID, err := getOrCreateRoleID(req.Role)
	if err != nil {
		log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —Ä–æ–ª–∏ %s: %v\n", time.Now().Format("2006/01/02 15:04:05"), req.Role, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ–ª–∏"})
		return
	}

	log.Printf("%s ‚ÑπÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s %s (%s), –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ID: %d, is_owner=%v, role_id=%d\n",
		time.Now().Format("2006/01/02 15:04:05"), req.FirstName, req.LastName, req.Email, orgID, isOwner, roleID)

	err = createUserWithVerification(
		req.FirstName,
		req.LastName,
		req.Email,
		string(hashedPassword),
		verificationToken,
		verificationExpires,
		orgID,
		isOwner,
		roleID, // üëà —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º —á–∏—Å–ª–æ–≤–æ–π ID
	)
	if err != nil {
		log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	err = sendVerificationEmail(req.Email, verificationToken)
	if err != nil {
		log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email"})
		return
	}

	log.Printf("%s ‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ %s\n", time.Now().Format("2006/01/02 15:04:05"), req.Email)
	c.JSON(http.StatusCreated, gin.H{"message": "–ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"})
}

func generateToken() string {
	b := make([]byte, 32)
	_, err := rand.Read(b)
	if err != nil {
		log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
		return ""
	}
	token := hex.EncodeToString(b)
	log.Printf("%s üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %s\n", time.Now().Format("2006/01/02 15:04:05"), token)
	return token
}

func sendVerificationEmail(toEmail string, token string) error {
	smtpHost := os.Getenv("SMTP_HOST")
	smtpPort := os.Getenv("SMTP_PORT")
	smtpUser := os.Getenv("SMTP_USER")
	smtpPass := os.Getenv("SMTP_PASS")
	frontendURL := os.Getenv("FRONTEND_URL")

	verifyLink := frontendURL + "/verify?token=" + token

	subject := "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
	body := "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n" + verifyLink + "\n\n–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å ‚Äî –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ."

	msg := "From: " + smtpUser + "\n" +
		"To: " + toEmail + "\n" +
		"Subject: " + subject + "\n\n" + body

	auth := smtp.PlainAuth("", smtpUser, smtpPass, smtpHost)

	log.Printf("%s ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ %s\n", time.Now().Format("2006/01/02 15:04:05"), toEmail)
	err := smtp.SendMail(smtpHost+":"+smtpPort, auth, smtpUser, []string{toEmail}, []byte(msg))
	if err != nil {
		log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –Ω–∞ %s: %v\n", time.Now().Format("2006/01/02 15:04:05"), toEmail, err)
		return err
	}

	log.Printf("%s ‚úÖ –ü–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ %s\n", time.Now().Format("2006/01/02 15:04:05"), toEmail)
	return nil
}

func verifyHandler(c *gin.Context) {
	var req struct {
		Token string `json:"token"`
	}

	if err := c.ShouldBindJSON(&req); err != nil || req.Token == "" {
		log.Printf("%s ‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω\n", time.Now().Format("2006/01/02 15:04:05"))
		c.JSON(http.StatusBadRequest, gin.H{"error": "–¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"})
		return
	}

	log.Printf("%s üîê POST /verify - –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: %s\n", time.Now().Format("2006/01/02 15:04:05"), req.Token)

	res, err := db.Exec(`
		UPDATE users
		SET email_verified = true,
		    verification_token = NULL,
		    verification_token_expires = NULL
		WHERE verification_token = $1 AND verification_token_expires > NOW()
	`, req.Token)

	if err != nil {
		log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email_verified –≤ –ë–î: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"})
		return
	}

	rows, err := res.RowsAffected()
	if err != nil {
		log.Printf("%s ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
	} else {
		log.Printf("%s ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: %d\n", time.Now().Format("2006/01/02 15:04:05"), rows)
	}

	if rows == 0 {
		log.Printf("%s ‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫\n", time.Now().Format("2006/01/02 15:04:05"))
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω"})
		return
	}

	log.Printf("%s üì¨ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —É—Å–ø–µ—à–Ω–æ\n", time.Now().Format("2006/01/02 15:04:05"))
	c.JSON(http.StatusOK, gin.H{"message": "Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"})
}

func verifyEmailHandler(c *gin.Context) {
	token := c.Query("token")
	if token == "" {
		log.Printf("%s ‚ùå GET /verify - —Ç–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω\n", time.Now().Format("2006/01/02 15:04:05"))
		c.JSON(http.StatusBadRequest, gin.H{"error": "–¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω"})
		return
	}

	log.Printf("%s üîç GET /verify - –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: %s\n", time.Now().Format("2006/01/02 15:04:05"), token)

	var userID int
	var expiresAt time.Time
	err := db.QueryRow(`
		SELECT id, verification_token_expires 
		FROM users 
		WHERE verification_token = $1
	`, token).Scan(&userID, &expiresAt)

	if err != nil {
		log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω"})
		return
	}

	log.Printf("%s ‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID %d, —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ %v\n", time.Now().Format("2006/01/02 15:04:05"), userID, expiresAt)

	if time.Now().After(expiresAt) {
		log.Printf("%s ‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫\n", time.Now().Format("2006/01/02 15:04:05"))
		c.JSON(http.StatusBadRequest, gin.H{"error": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç—ë–∫"})
		return
	}

	res, err := db.Exec(`
		UPDATE users 
		SET email_verified = true, verification_token = NULL, verification_token_expires = NULL 
		WHERE id = $1
	`, userID)

	if err != nil {
		log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email_verified: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"})
		return
	}

	rows, err := res.RowsAffected()
	if err != nil {
		log.Printf("%s ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
	} else {
		log.Printf("%s üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: %d\n", time.Now().Format("2006/01/02 15:04:05"), rows)
	}

	if rows == 0 {
		log.Printf("%s ‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω\n", time.Now().Format("2006/01/02 15:04:05"))
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"})
		return
	}

	log.Printf("%s üìß Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω\n", time.Now().Format("2006/01/02 15:04:05"), userID)
	c.JSON(http.StatusOK, gin.H{"message": "Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"})
}

func AuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		authHeader := c.GetHeader("Authorization")
		if authHeader == "" || len(authHeader) <= len("Bearer ") {
			log.Printf("%s ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization\n", time.Now().Format("2006/01/02 15:04:05"))
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"})
			return
		}

		tokenStr := authHeader[len("Bearer "):]
		log.Printf("%s üîê –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: %s\n", time.Now().Format("2006/01/02 15:04:05"), tokenStr)

		token, err := jwt.Parse(tokenStr, func(token *jwt.Token) (interface{}, error) {
			return jwtSecret, nil
		})
		if err != nil || !token.Valid {
			log.Printf("%s ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"})
			return
		}

		claims, ok := token.Claims.(jwt.MapClaims)
		if !ok {
			log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ claims –∏–∑ —Ç–æ–∫–µ–Ω–∞\n", time.Now().Format("2006/01/02 15:04:05"))
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞"})
			return
		}

		userIDFloat, ok := claims["user_id"].(float64)
		if !ok {
			log.Printf("%s ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id –≤ —Ç–æ–∫–µ–Ω–µ\n", time.Now().Format("2006/01/02 15:04:05"))
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id"})
			return
		}
		userID := int(userIDFloat)

		session, err := getSessionByToken(tokenStr)
		if err != nil {
			log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É: %v\n", time.Now().Format("2006/01/02 15:04:05"), err)
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"})
			return
		}
		if session.Revoked {
			log.Printf("%s ‚ùå –°–µ—Å—Å–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º %s –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞\n", time.Now().Format("2006/01/02 15:04:05"), tokenStr)
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"})
			return
		}
		if session.ExpiresAt.Before(time.Now()) {
			log.Printf("%s ‚ùå –°–µ—Å—Å–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º %s –∏—Å—Ç–µ–∫–ª–∞ –≤ %v\n", time.Now().Format("2006/01/02 15:04:05"), tokenStr, session.ExpiresAt)
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞"})
			return
		}

		// üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user, err := getUserByID(userID)
		if err != nil {
			log.Printf("%s ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%d: %v\n", time.Now().Format("2006/01/02 15:04:05"), userID, err)
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
			return
		}
		if user.IsBlocked {
			log.Printf("%s üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=%d –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n", time.Now().Format("2006/01/02 15:04:05"), userID)
			c.AbortWithStatusJSON(http.StatusForbidden, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"})
			return
		}

		log.Printf("%s ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID %d\n", time.Now().Format("2006/01/02 15:04:05"), userID)
		c.Set("user_id", userID)
		c.Next()
	}
}

func MeHandler(c *gin.Context) {
	userID := c.GetInt("user_id")

	user, err := getUserByID(userID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"id":         user.ID,
		"first_name": user.FirstName,
		"last_name":  user.LastName,
		"email":      user.Email,
	})
}

type Session struct {
	ID        int
	UserID    int
	CreatedAt time.Time
	ExpiresAt time.Time
	Revoked   bool
	JWTToken  string
}

func getSessionByToken(token string) (*Session, error) {
	var session Session
	err := db.QueryRow(`
		SELECT id, user_id, created_at, expires_at, revoked, jwt_token
		FROM sessions
		WHERE jwt_token = $1
	`, token).Scan(&session.ID, &session.UserID, &session.CreatedAt, &session.ExpiresAt, &session.Revoked, &session.JWTToken)

	if err != nil {
		return nil, err
	}

	return &session, nil
}

func logoutHandler(c *gin.Context) {
	authHeader := c.GetHeader("Authorization")
	tokenStr := authHeader[len("Bearer "):]

	_, err := db.Exec(`UPDATE sessions SET revoked = true WHERE jwt_token = $1`, tokenStr)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"})
}

func checkAuthHandler(c *gin.Context) {
	userID := c.GetInt("user_id")
	user, err := getUserByID(userID)
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"status": "unauthorized"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"status": "authorized",
		"user": gin.H{
			"id":       user.ID,
			"username": user.FirstName + " " + user.LastName,
			"email":    user.Email,
		},
	})
}

func generateTokens(userID int) (string, string, error) {
	accessToken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"user_id": userID,
		"exp":     time.Now().Add(2 * time.Hour).Unix(),
	})
	accessTokenStr, err := accessToken.SignedString(jwtSecret)
	if err != nil {
		return "", "", err
	}

	refreshToken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"user_id": userID,
		"exp":     time.Now().Add(7 * 24 * time.Hour).Unix(), // –∂–∏–≤—ë—Ç –¥–æ–ª—å—à–µ
	})
	refreshTokenStr, err := refreshToken.SignedString(jwtSecret)
	if err != nil {
		return "", "", err
	}

	return accessTokenStr, refreshTokenStr, nil
}
func refreshHandler(c *gin.Context) {
	refreshTokenStr, err := c.Cookie("refresh_token")
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Refresh —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	token, err := jwt.Parse(refreshTokenStr, func(token *jwt.Token) (interface{}, error) {
		return jwtSecret, nil
	})
	if err != nil || !token.Valid {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π refresh —Ç–æ–∫–µ–Ω"})
		return
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞"})
		return
	}

	userIDFloat, ok := claims["user_id"].(float64)
	if !ok {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π user_id"})
		return
	}

	userID := int(userIDFloat)
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π access_token
	newAccess, _, err := generateTokens(userID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ access —Ç–æ–∫–µ–Ω–∞"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"access_token": newAccess,
	})
}

type InviteRequest struct {
	FirstName      string `json:"first_name"`
	LastName       string `json:"last_name"`
	Email          string `json:"email"`
	Role           string `json:"role"`
	OrganizationID int    `json:"organization_id"`
}

func inviteHandler(c *gin.Context) {
	var req InviteRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v\n", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}
	log.Printf("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: %+v\n", req)

	if existingUser, _ := getUserByEmail(req.Email); existingUser != nil {
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email %s —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n", req.Email)
		c.JSON(http.StatusConflict, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
		return
	}

	inviterID := c.GetInt("user_id")
	if inviterID == 0 {
		log.Printf("inviterID == 0, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç\n")
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"})
		return
	}

	inviter, err := getUserByID(inviterID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID %d: %v\n", inviterID, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}
	if inviter.OrganizationID == 0 {
		log.Printf("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%d\n", inviterID)
		c.JSON(http.StatusForbidden, gin.H{"error": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	// üëâ –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ä–æ–ª—å –ø–æ –∏–º–µ–Ω–∏
	roleID, err := getOrCreateRoleID(req.Role)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —Ä–æ–ª–∏ %s: %v\n", req.Role, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ–ª–∏"})
		return
	}

	// üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
	token := generateToken()
	expires := time.Now().Add(24 * time.Hour)
	log.Printf("–°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: %s, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: %s\n", token, expires.Format(time.RFC3339))

	// ‚úÖ –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	err = createUserWithVerification(
		req.FirstName,
		req.LastName,
		req.Email,
		"", // –±–µ–∑ –ø–∞—Ä–æ–ª—è
		token,
		expires,
		inviter.OrganizationID,
		false, // is_owner = false
		roleID,
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}
	log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email %s —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ\n", req.Email)

	err = sendInvitationEmail(req.Email, token)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ"})
		return
	}
	log.Printf("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email %s\n", req.Email)

	c.JSON(http.StatusOK, gin.H{"message": "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"})
}

func sendInvitationEmail(toEmail string, token string) error {
	smtpHost := os.Getenv("SMTP_HOST")
	smtpPort := os.Getenv("SMTP_PORT")
	smtpUser := os.Getenv("SMTP_USER")
	smtpPass := os.Getenv("SMTP_PASS")
	frontendURL := os.Getenv("FRONTEND_URL")

	// –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞—Ä–æ–ª—è
	inviteLink := frontendURL + "/set-password?token=" + token

	subject := "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ DocBuilder"
	body := "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ DocBuilder.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n" + inviteLink

	msg := "From: " + smtpUser + "\n" +
		"To: " + toEmail + "\n" +
		"Subject: " + subject + "\n\n" + body

	auth := smtp.PlainAuth("", smtpUser, smtpPass, smtpHost)
	return smtp.SendMail(smtpHost+":"+smtpPort, auth, smtpUser, []string{toEmail}, []byte(msg))
}

type SetPasswordRequest struct {
	Token    string `json:"token"`
	Password string `json:"password"`
}

func setPasswordHandler(c *gin.Context) {
	var req SetPasswordRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	user, err := getUserByToken(req.Token)
	if err != nil || user == nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω"})
		return
	}

	// üõ†Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º sql.NullTime –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
	if !user.VerificationTokenExpires.Valid || time.Now().After(user.VerificationTokenExpires.Time) {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç—ë–∫"})
		return
	}

	hashedPassword, err := hashPassword(req.Password)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è"})
		return
	}

	// ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err = db.Exec(`
		UPDATE users 
		SET password_hash = $1, email_verified = TRUE, verification_token = '', verification_token_expires = NULL 
		WHERE id = $2
	`, hashedPassword, user.ID)

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	// ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
	accessToken, refreshToken, err := generateTokens(user.ID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"})
		return
	}

	// ‚úÖ –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
	err = createSession(user.ID, accessToken, time.Now().Add(15*time.Minute))
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏"})
		return
	}

	// ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refresh-—Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∏
	c.SetCookie("refresh_token", refreshToken, 7*24*60*60, "/", "localhost", false, true)

	// ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É access-—Ç–æ–∫–µ–Ω –∏ user_id
	c.JSON(http.StatusOK, gin.H{
		"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
		"token":   accessToken,
		"user_id": user.ID,
	})
}

func getUserByToken(token string) (*User, error) {
	row := db.QueryRow(`
		SELECT id, email, password_hash, first_name, last_name, verification_token_expires, organization_id
		FROM users
		WHERE verification_token = $1
	`, token)

	var user User
	if err := row.Scan(
		&user.ID,
		&user.Email,
		&user.PasswordHash,
		&user.FirstName,
		&user.LastName,
		&user.VerificationTokenExpires,
		&user.OrganizationID,
	); err != nil {
		return nil, err
	}

	return &user, nil
}

func hashPassword(password string) (string, error) {
	bytes, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	return string(bytes), err
}

func createOrganization(name string) (int, error) {
	var orgID int
	err := db.QueryRow(`
		INSERT INTO organizations (name) 
		VALUES ($1) 
		RETURNING id
	`, name).Scan(&orgID)
	return orgID, err
}

func getInvitedUsersHandler(c *gin.Context) {
	inviterID := c.GetInt("user_id")
	if inviterID == 0 {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"})
		return
	}

	inviter, err := getUserByID(inviterID)
	if err != nil || inviter.OrganizationID == 0 {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è"})
		return
	}

	users, err := getUsersByOrganizationID(inviter.OrganizationID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"})
		return
	}

	// üéØ –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
	var result []gin.H
	for _, u := range users {
		result = append(result, gin.H{
			"ID":            u.ID,
			"FirstName":     u.FirstName,
			"LastName":      u.LastName,
			"Email":         u.Email,
			"EmailVerified": u.EmailVerified,
			"IsOwner":       u.IsOwner,
			"Role":          u.RoleName,
			"IsBlocked":     u.IsBlocked, // ‚úÖ –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
		})
	}

	c.JSON(http.StatusOK, result)
}

type AssignRoleRequest struct {
	UserIDs []int  `json:"user_ids"` // —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	Role    string `json:"role"`     // –Ω–æ–≤–∞—è —Ä–æ–ª—å: "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–í–ª–∞–¥–µ–ª–µ—Ü" –∏ —Ç.–¥.
}

type Role struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

func assignRoleHandler(c *gin.Context) {
	var req AssignRoleRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v\n", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	// üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	adminID := c.GetInt("user_id")
	admin, err := getUserByID(adminID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID=%d: %v\n", adminID, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"})
		return
	}

	// üîí –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü (1) –∏–ª–∏ –∞–¥–º–∏–Ω (2) –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –º–µ–Ω—è—Ç—å —Ä–æ–ª–∏
	if admin.RoleID != 1 && admin.RoleID != 2 {
		log.Printf("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: user_id=%d, role_id=%d\n", admin.ID, admin.RoleID)
		c.JSON(http.StatusForbidden, gin.H{"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π"})
		return
	}

	// ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—É—Å—Ç—É—é —Ä–æ–ª—å
	if req.Role == "" || len(req.UserIDs) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"})
		return
	}

	// ‚úÖ –°–æ–∑–¥–∞—ë–º —Ä–æ–ª—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
	roleID, err := ensureRoleExists(req.Role)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏ %s: %v\n", req.Role, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ–ª–∏"})
		return
	}

	// üß† –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü
	if req.Role == "–í–ª–∞–¥–µ–ª–µ—Ü" {
		existingOwner, err := findUserByRole("–í–ª–∞–¥–µ–ª–µ—Ü")
		if err == nil && existingOwner != nil {
			for _, userID := range req.UserIDs {
				if existingOwner.ID != userID {
					c.JSON(http.StatusBadRequest, gin.H{"error": "–†–æ–ª—å '–í–ª–∞–¥–µ–ª–µ—Ü' —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"})
					return
				}
			}
		}
	}

	// ‚úÖ –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
	for _, userID := range req.UserIDs {
		err := updateUserRole(userID, req.Role)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%d: %v\n", userID, err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
			return
		}
	}

	log.Printf("‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å '%s' (ID=%d) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: %v\n", req.Role, roleID, req.UserIDs)
	c.JSON(http.StatusOK, gin.H{"message": "–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"})
}

func getAllUsersHandler(c *gin.Context) {
	users, err := getAllUsers()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"})
		return
	}

	var result []gin.H
	for _, u := range users {
		result = append(result, gin.H{
			"id":       u.ID,
			"name":     fmt.Sprintf("%s %s", u.FirstName, u.LastName),
			"position": u.RoleName, // ‚úÖ —Ç–µ–ø–µ—Ä—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
		})
	}

	c.JSON(http.StatusOK, result)
}

func findUserByRole(roleName string) (*User, error) {
	row := db.QueryRow(`
		SELECT u.id, u.email, u.first_name, u.last_name, u.role_id, r.name
		FROM users u
		JOIN roles r ON r.id = u.role_id
		WHERE r.name = $1
		LIMIT 1
	`, roleName)

	var user User
	err := row.Scan(&user.ID, &user.Email, &user.FirstName, &user.LastName, &user.RoleID, &user.RoleName)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

func getAllRolesHandler(c *gin.Context) {
	rows, err := db.Query("SELECT id, name FROM roles")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π"})
		return
	}
	defer rows.Close()

	var roles []Role
	for rows.Next() {
		var role Role
		if err := rows.Scan(&role.ID, &role.Name); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ —Ä–æ–ª–∏: %v", err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–ª–∏"})
			return
		}
		roles = append(roles, role)
	}

	c.JSON(http.StatusOK, roles)
}

func ensureRoleExists(roleName string) (int, error) {
	var roleID int
	err := db.QueryRow("SELECT id FROM roles WHERE name = $1", roleName).Scan(&roleID)
	if err == sql.ErrNoRows {
		// —Ä–æ–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
		err = db.QueryRow("INSERT INTO roles (name) VALUES ($1) RETURNING id", roleName).Scan(&roleID)
	}
	return roleID, err
}

func renameRoleHandler(c *gin.Context) {
	var req RenameRoleRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v\n", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–π —Ä–æ–ª–∏
	var roleID int
	err := db.QueryRow("SELECT id FROM roles WHERE name = $1", req.OldName).Scan(&roleID)
	if err == sql.ErrNoRows {
		c.JSON(http.StatusNotFound, gin.H{"error": "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	} else if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–æ–ª–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏"})
		return
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ä–æ–ª–∏
	_, err = db.Exec("UPDATE roles SET name = $1 WHERE id = $2", req.NewName, roleID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ä–æ–ª–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ä–æ–ª—å"})
		return
	}

	log.Printf("‚úÖ –†–æ–ª—å '%s' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '%s'\n", req.OldName, req.NewName)
	c.JSON(http.StatusOK, gin.H{"message": "–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞"})
}

func deleteRoleHandler(c *gin.Context) {
	var req DeleteRoleRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v\n", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–æ–ª—å
	var roleID int
	err := db.QueryRow("SELECT id FROM roles WHERE name = $1", req.Name).Scan(&roleID)
	if err == sql.ErrNoRows {
		c.JSON(http.StatusNotFound, gin.H{"error": "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	} else if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–æ–ª–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å
	var userCount int
	err = db.QueryRow("SELECT COUNT(*) FROM users WHERE role_id = $1", roleID).Scan(&userCount)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å"})
		return
	}
	if userCount > 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"})
		return
	}

	// –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å
	_, err = db.Exec("DELETE FROM roles WHERE id = $1", roleID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å"})
		return
	}

	log.Printf("üóëÔ∏è –†–æ–ª—å '%s' —É–¥–∞–ª–µ–Ω–∞\n", req.Name)
	c.JSON(http.StatusOK, gin.H{"message": "–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"})
}

func blockUserHandler(c *gin.Context) {
	adminID := c.GetInt("user_id")
	admin, err := getUserByID(adminID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID=%d: %v\n", adminID, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"})
		return
	}

	log.Printf("üë§ –ü–æ–ø—ã—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: AdminID=%d, RoleID=%d, RoleName=%s, IsOwner=%v\n",
		admin.ID, admin.RoleID, admin.RoleName, admin.IsOwner)

	// ‚úÖ –¢–æ–ª—å–∫–æ –í–ª–∞–¥–µ–ª–µ—Ü (1) –∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (2)
	if admin.RoleID != 1 && admin.RoleID != 2 {
		log.Printf("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: RoleID=%d\n", admin.RoleID)
		c.JSON(http.StatusForbidden, gin.H{"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"})
		return
	}

	userIDStr := c.Param("id")
	userID, err := strconv.Atoi(userIDStr)
	if err != nil {
		log.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s\n", userIDStr)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
		return
	}

	err = setUserBlockedStatus(userID, true)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%d: %v\n", userID, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=%d —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n", userID)
	c.JSON(http.StatusOK, gin.H{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"})
}

func deleteUserHandler(c *gin.Context) {
	adminID := c.GetInt("user_id")
	admin, err := getUserByID(adminID)
	if err != nil || (!admin.IsOwner && admin.RoleName != "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä") {
		c.JSON(http.StatusForbidden, gin.H{"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"})
		return
	}

	userIDStr := c.Param("id")
	userID, err := strconv.Atoi(userIDStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
		return
	}

	// –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
	if adminID == userID {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è"})
		return
	}

	_, err = db.Exec("DELETE FROM users WHERE id = $1", userID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%d: %v\n", userID, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	log.Printf("üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=%d —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω\n", userID)
	c.JSON(http.StatusOK, gin.H{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω"})
}

func unblockUserHandler(c *gin.Context) {
	adminID := c.GetInt("user_id")
	admin, err := getUserByID(adminID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID=%d: %v\n", adminID, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"})
		return
	}

	// üêû –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	log.Printf("üë§ –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: AdminID=%d, RoleID=%d, RoleName=%s, IsOwner=%v\n",
		admin.ID, admin.RoleID, admin.RoleName, admin.IsOwner)

	// ‚úÖ –¢–æ–ª—å–∫–æ –í–ª–∞–¥–µ–ª–µ—Ü (1) –∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (2)
	if admin.RoleID != 1 && admin.RoleID != 2 {
		log.Printf("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: RoleID=%d\n", admin.RoleID)
		c.JSON(http.StatusForbidden, gin.H{"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"})
		return
	}

	userIDParam := c.Param("id")
	userID, err := strconv.Atoi(userIDParam)
	if err != nil || userID == 0 {
		log.Printf("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s\n", userIDParam)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	_, err = db.Exec("UPDATE users SET is_blocked = FALSE WHERE id = $1", userID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%d: %v\n", userID, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"})
		return
	}

	log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=%d —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n", userID)
	c.JSON(http.StatusOK, gin.H{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"})
}
