package templates

import (
	"database/sql"
	"github.com/goccy/go-json"
	"log"
	"net/http"
	"regexp"
	"strconv"
	"strings"

	"github.com/gin-gonic/gin"
)

func RegisterTemplateRoutes(r *gin.Engine) {
	r.POST("/templates/create", createTemplateHandler)
	r.GET("/templates/get", getTemplateHandler)
	r.PUT("/templates/update", updateTemplateHandler)
	r.DELETE("/templates/delete", deleteTemplateHandler)
	r.GET("/templates/all", getAllTemplatesHandler)
	r.GET("/templates/:id", getTemplateByIDHandler)
	r.POST("/templates/rename", renameTemplateHandler)
	r.PUT("/templates/update-content", updateTemplateContentHandler)
	r.POST("/tags/create", createTagHandler)
	r.GET("/tags/all", getAllTagsHandler)
	r.PUT("/tags/:id", updateTagHandler)
	r.POST("/templates/styles", createTemplateStyleHandler)
	r.GET("/templates/:id/styles", getTemplateStylesHandler)

}

// ----------------- Create -----------------

type CreateRequest struct {
	UserID  int    `json:"user_id"`
	Name    string `json:"name"`
	Content string `json:"content"`
}

func createTemplateHandler(c *gin.Context) {
	var req CreateRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –±–∏–Ω–¥–∏–Ω–≥–∞ JSON:", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	log.Printf("–ü–æ–ª—É—á–µ–Ω —à–∞–±–ª–æ–Ω: %+v\n", req)

	newID, err := CreateTemplate(req.UserID, req.Name, req.Content)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"id": newID})
}

// ----------------- Get -----------------

func getTemplateHandler(c *gin.Context) {
	idStr := c.Query("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
		return
	}

	t, err := GetTemplateByID(id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	c.JSON(http.StatusOK, t)
}

// ----------------- Update -----------------

type UpdateRequest struct {
	ID      int    `json:"id"`
	Name    string `json:"name"`
	Content string `json:"content"`
}

func updateTemplateHandler(c *gin.Context) {
	var req UpdateRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	if err := UpdateTemplate(req.ID, req.Name, req.Content); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω"})
}

// ----------------- Delete -----------------

func deleteTemplateHandler(c *gin.Context) {
	idStr := c.Query("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
		return
	}

	if err := DeleteTemplate(id); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–®–∞–±–ª–æ–Ω —É–¥–∞–ª—ë–Ω"})
}

func getAllTemplatesHandler(c *gin.Context) {
	templates, err := GetAllTemplates() // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –ë–î
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤"})
		return
	}

	c.JSON(http.StatusOK, templates)
}

func getTemplateByIDHandler(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
		return
	}

	t, err := GetTemplateByID(id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	c.JSON(http.StatusOK, t)
}

type RenameTemplateRequest struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

func renameTemplateHandler(c *gin.Context) {
	var req RenameTemplateRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	if req.Name == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"})
		return
	}

	if err := RenameTemplate(req.ID, req.Name); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"})
}

type UpdateContentRequest struct {
	ID      int    `json:"id"`
	Content string `json:"content"`
}

func updateTemplateContentHandler(c *gin.Context) {
	var req UpdateContentRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –±–∏–Ω–¥–∏–Ω–≥–∞ JSON –≤ updateTemplateContentHandler:", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	log.Printf("üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —à–∞–±–ª–æ–Ω–∞ ID=%d, –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞=%d\n", req.ID, len(req.Content))

	if err := UpdateTemplateContent(req.ID, req.Content); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —à–∞–±–ª–æ–Ω–∞ ID=%d: %v\n", req.ID, err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"})
		return
	}

	log.Printf("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —à–∞–±–ª–æ–Ω–∞ ID=%d —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω\n", req.ID)
	c.JSON(http.StatusOK, gin.H{"message": "–ö–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω"})
}

type CreateTagRequest struct {
	Name        string `json:"name"`
	Label       string `json:"label"`
	Description string `json:"description"`
	Type        string `json:"type"` // üëà –Ω–æ–≤–æ–µ –ø–æ–ª–µ
}

func createTagHandler(c *gin.Context) {
	var req CreateTagRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	if req.Name == "" || req.Label == "" || req.Type == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ò–º—è, –º–µ—Ç–∫–∞ –∏ —Ç–∏–ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	tag, err := CreateTag(req.Name, req.Label, req.Description, req.Type) // üëà –ø–µ—Ä–µ–¥–∞–µ–º type
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞"})
		return
	}

	c.JSON(http.StatusCreated, tag)
}

func getAllTagsHandler(c *gin.Context) {
	tags, err := GetAllTags()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤"})
		return
	}
	c.JSON(http.StatusOK, tags)
}

func updateTagHandler(c *gin.Context) {
	tagID := c.Param("id")
	if tagID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "ID —Ç–µ–≥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"})
		return
	}

	var req UpdateTagRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	if req.Name == "" || req.Label == "" || req.Type == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ò–º—è, –º–µ—Ç–∫–∞ –∏ —Ç–∏–ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	tag, err := UpdateTag(tagID, req.Name, req.Label, req.Description, req.Type) // üëà –ø–µ—Ä–µ–¥–∞–µ–º type
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞"})
		return
	}

	c.JSON(http.StatusOK, tag)
}

type CreateStyleRequest struct {
	TemplateID int                    `json:"template_id"`
	Selector   string                 `json:"selector"`
	Styles     map[string]interface{} `json:"styles"`
	Scope      string                 `json:"scope"` // "global" –∏–ª–∏ "inline"
}

func createTemplateStyleHandler(c *gin.Context) {
	var req CreateStyleRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
		return
	}

	if req.TemplateID == 0 || len(req.Styles) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	if req.Scope == "" {
		req.Scope = "global" // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∏–ª–∏ –≤ JSON
	sanitizedStyles := toKebabCaseStyle(req.Styles)

	stylesJSON, err := json.Marshal(sanitizedStyles)
	if err != nil {
		log.Println("‚ùå Marshal error:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª—è"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å—Ç–∏–ª—å
	var existingSelector string
	err = db.QueryRow(`
		SELECT selector FROM template_styles
		WHERE template_id = $1 AND scope = $2 AND styles::jsonb = $3::jsonb
		LIMIT 1
	`, req.TemplateID, req.Scope, stylesJSON).Scan(&existingSelector)

	if err == nil {
		// –°—Ç–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ selector
		c.JSON(http.StatusOK, gin.H{
			"message":  "–°—Ç–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
			"selector": existingSelector,
		})
		return
	} else if err != sql.ErrNoRows {
		log.Println("‚ùå SQL SELECT error:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∏–ª—è"})
		return
	}

	// –°—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º
	err = CreateTemplateStyleWithScope(req.TemplateID, req.Selector, sanitizedStyles, req.Scope)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{
		"message":  "–°—Ç–∏–ª—å —Å–æ–∑–¥–∞–Ω",
		"selector": req.Selector,
	})
}

func getTemplateStylesHandler(c *gin.Context) {
	idStr := c.Param("id")
	templateID, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
		return
	}

	styles, err := GetStylesByTemplateID(templateID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∏–ª–µ–π"})
		return
	}

	c.JSON(http.StatusOK, styles)
}

func CreateTemplateStyleWithScope(templateID int, selector string, styles map[string]interface{}, scope string) error {
	stylesJSON, err := json.Marshal(styles)
	if err != nil {
		log.Println("‚ùå Marshal error:", err)
		return err
	}

	_, err = db.Exec(`
		INSERT INTO template_styles (template_id, selector, styles, scope)
		VALUES ($1, $2, $3, $4)
		ON CONFLICT (template_id, selector, scope) DO UPDATE
		SET styles = EXCLUDED.styles
	`, templateID, selector, stylesJSON, scope)

	if err != nil {
		log.Println("‚ùå SQL Exec error:", err)
	}

	return err
}

func toKebabCaseStyle(input map[string]interface{}) map[string]interface{} {
	result := make(map[string]interface{})
	for k, v := range input {
		// fontSize ‚Üí font-size
		kebabKey := regexp.MustCompile("([a-z0-9])([A-Z])").ReplaceAllString(k, "${1}-${2}")
		result[strings.ToLower(kebabKey)] = v
	}
	return result
}
